#--------------#
# Tweet-a-Watt #
#--------------#
This fork reflects my own changes to the Tweet-a-Watt project.

I've cleaned up a lot of the original code to make it more legible
and follow Python (and normal coding) practices. Changes have only
been to wattcher.py and sensorhistory.py. xbee.py and twitter.py are
untouched.

Twitter code was organized better in wattcher.py also but is untested.

You can run wattcher.py with '-h' to print out help on the
various arguments.

#-------------#
# Calibration #
#-------------#

A sensor can be calibrated by plugging the Kill-A-Watt into a wall
outlet with nothing plugged into the KAW itself and then using the
'-c' arg. For example, to calibrate sensor #2:

$ wattcher.py -c -s 2

#------------------#
# Database Logging #
#------------------#

DB functionality has been added so that you can log data from
any sensor to a MySQL DB. The power.sql file contains all the SQL
necessary to create the tables (the DB must already exist). Since
it's just using mysql.connector module which is part of the Python
standard library, nothing extra is required.

To use this functionality:

1. Create a MySQL database.

2. Create a user in MySQL (or use an existing one) and grant them
rights to the new DB.

3. Import the power.sql file. For example:

mysql> source < power.sql

4. Create at least one device in the devices table. For example:

mysql> INSERT INTO devices (name, description) VALUES ('stereo',
       'Stereo in home theater room.');

5. Edit the DB_XX vars in wattcher.py, e.g. DB_USER, DB_PASS, etc.

Example runnign wattcher.py and sending data from sensor #1 to the
DB for a device named 'stereo':

$ wattcher.py -m -s 1 -n 'stereo'

#-------------------#
# Web Page Graphing #
#-------------------#

The files under webpage/ will create a simple webpage that searches
the DB for entries and creates a graph for each device found which 
has > 5 data entries.

It uses mysqli to talk to the DB. This is already included in most PHP
distributions so you shouldn't have to install that.

For the graph creation, it uses pChart (http://www.pchart.net). You'll
need to download it and put it in your web root somewhere. By default,
graph.php will look for it under ../pchart/.

Important: you'll need to make sure that the graphs/ dir is owned by
whatever user your webserver runs as, e.g. 'apache', since this is
where the graphs (.png files) will all be created.

#----------#
# Accuracy #
#----------#

Finally, keep in mind that the data from these devices are horribly
innaccurate after passing through the xbees. It may have been more
accurate with earlier generation models since that's what the
original project was written for but current models will only
provide ballpark info, at best. This is an old and pretty much dead
project from Adafruit so you can't expect much.

Cheers,
Kevin Masaryk

